{"version":3,"sources":["App/Components/Home/Home.tsx","App/Components/Distribution/Distribution.tsx","App/Navigation/Navigation.tsx","App/App.tsx","index.tsx"],"names":["Home","className","src","alt","href","id","React","Component","API_LINK","Distribution","props","config","data","xField","yField","label","color","point","size","shape","style","shadowBlur","fill","stroke","lineWidth","tooltip","showMarkers","state","active","interactions","type","regions","dataTypes","region_loaded","dataTypes_loaded","chartData_loaded","selectedRegion","selectedYear","selectedType","chartData","dataType","region","results","onReset","bind","onSelectRegion","onSelectYear","onSelectType","onFinish","a","node","fetch","then","response","json","this","setState","year","requestLink","event","target","value","getRegions","getDataTypes","defaultValue","onChange","map","item","name","checked","onClick","htmlType","units","Navigation","to","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.779a9d2f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.scss\"\n\nclass Home extends React.Component<any, any>{\n\n    render() {\n        return (\n            <>\n                <header>\n                    <span className={\"line-text\"}>Programmers’ Day CO2ding</span>\n                    <img src={\"./assets/header-img.svg\"} alt={\"header-img\"}/>\n                    <div>\n                        <h1>Завдання</h1>\n                        <p>Створити  інтерактивний  веб  застосунок  для  візуалізації  та  поліпшення  аналізу\n                            викидів парникових газів.<br/> <br/>Що буде включати головну та набір спеціалізованих сторінок.\n                            Які повинні презентувати надані нижче данні викидів у формі діаграм. <br/><br/>Поведінка котрих\n                            має  включати  елементи  інтерактивності,  за  допомогою  яких  можна  змінювати\n                            відображення  статистики  по  викидах  за  регіонами,  роками,  а  також  кількості  зелених\n                            насаджень,  щоб  нівелювати  задану  шкоду  атмосфері.  <br/><br/>Фільтрація  та\n                            сортування даних буде плюсом.  Данні  для  діаграм  повинні  надходити  з  серверної\n                            частини застосунку, реалізованої як REST за наданою нижче специфікацією.</p>\n                        <a href={\"#team\"}>Про команду</a>\n                    </div>\n                </header>\n                <section id=\"team\">\n                    <div>\n                        <h1>JWP | FrontEnd</h1>\n                        <p>Команда JWP - це команда з ентузіастів в усіх сверах ІТ. Від менеджменту до розробки застосунків використовуючи популярні та актуальні технології.\n                            <br/><br/>У вільний від проектів час ми полюбляємо брати участь в різних хакатонах, турніра та змаганнях з програмування.\n                            <br/><br/>Цього турніру ми вирішили випробувати свої сили по одинці тому розділились на бекенд та фронт енд команди.\n                        </p>\n                    </div>\n                    <img src={\"./assets/team.jpg\"} alt={\"team\"}/>\n                </section>\n            </>\n        );\n    }\n}\n\nexport default Home","import {Button } from \"antd\";\nimport React from \"react\";\nimport {Line} from \"@ant-design/charts\";\nimport \"./style.scss\"\n\n\nconst API_LINK = 'https://co2ding-2021.herokuapp.com/api/v1/'\n\nclass Distribution extends React.Component<any, any>{\n    config = {\n        data: [],\n        xField: 'dateStart',\n        yField: 'value',\n        label: {},\n        color: '#fff',\n        point: {\n            size: 5,\n            shape: 'circle',\n            style: {\n                shadowBlur: 4,\n                fill: 'white',\n                stroke: '#5B8FF9',\n                lineWidth: 2,\n            },\n        },\n        tooltip: { showMarkers: false },\n        state: {\n            active: {\n                style: {\n                    shadowBlur: 4,\n                    stroke: '#fff',\n                    fill: 'red',\n                },\n            },\n        },\n        interactions: [{ type: 'marker-active' }],}\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            regions: [],\n            dataTypes: [],\n            region_loaded: false,\n            dataTypes_loaded: false,\n            chartData_loaded:false,\n            selectedRegion: 0,\n            selectedYear: 0,\n            selectedType: 0,\n            chartData:{\n                dataType:{},\n                region:{},\n                results:[]\n            }\n        }\n        this.onReset = this.onReset.bind(this)\n        this.onSelectRegion = this.onSelectRegion.bind(this)\n        this.onSelectYear = this.onSelectYear.bind(this)\n        this.onSelectType = this.onSelectType.bind(this)\n        this.onFinish = this.onFinish.bind(this)\n    }\n\n    async getRegions(){\n        const requestLink = API_LINK + \"distribution/regions\"\n        let node = null\n\n        node = await fetch(requestLink)\n            .then(response => response.json())\n            .then(data => node = data)\n            this.setState({\n                regions: node.results,\n                region_loaded: true\n            })\n        return node\n    }\n\n    async getDataTypes(){\n        const requestLink = API_LINK + \"distribution/dataTypes\"\n        let node = null\n\n        node = await fetch(requestLink)\n            .then(response => response.json())\n            .then(data => node = data)\n        this.setState({\n            dataTypes: node.results,\n            dataTypes_loaded: true\n        })\n        return node\n    }\n\n    onReset(){\n        this.setState({\n            selectedRegion: 0,\n            selectedYear: 0,\n            selectedType: null\n        })\n        this.config.data = []\n    }\n\n    async onFinish(){\n        const year = this.state.selectedYear\n        const region = this.state.selectedRegion\n        const type = this.state.selectedType\n        let node = null\n        let requestLink:string\n\n        if(year>0 && region>0 && type>0){\n            requestLink = API_LINK + `distribution/summary?year=${year}&region=${region}&dataType=${type}`\n            node = await fetch(requestLink)\n                .then(response => response.json())\n                .then(data => node = data)\n            this.config.data = node.results;\n            this.setState({\n                chartData:{\n                    dataType: node.dataType,\n                    region: node.region,\n                    results: node.results\n                },\n                chartData_loaded: true\n            })\n        }else{\n            this.setState({chartData_loaded: false})\n        }\n    }\n\n    onSelectRegion(event:any){\n        this.setState({selectedRegion: event.target.value})\n    }\n    onSelectYear(event:any){\n        this.setState({selectedYear: event.target.value})\n    }\n    onSelectType(event:any){\n        this.setState({selectedType: event.target.value})\n    }\n\n    componentDidMount() {\n        this.getRegions();\n        this.getDataTypes()\n    }\n\n\n\n    render() {\n        return (\n            <section id=\"distribution\">\n                <div className={\"chart-info\"}>\n                    <div className={\"chart-action\"}>\n                        <div className={\"select-section\"}>\n                                {this.state.region_loaded\n                                    ?\n                                    <select\n                                        defaultValue = {this.state.selectedRegion}\n                                        value = {this.state.selectedRegion}\n                                        onChange={this.onSelectRegion}>\n                                        <option value={0} >Select Region</option>\n                                        {this.state.regions.map((item:any)=><option value={item.id} key={item.id}>{item.name}</option>)}\n                                    </select>\n                                    : \"getting info\"}\n\n\n                                <select\n                                    defaultValue = {this.state.selectedYear}\n                                    value = {this.state.selectedYear}\n                                    onChange={this.onSelectYear}\n                                >\n                                    <option value={0} >Select Year</option>\n                                    <option value={2015} >2015</option>\n                                    <option value={2016} >2016</option>\n                                    <option value={2017} >2017</option>\n                                    <option value={2018} >2018</option>\n                                    <option value={2019} >2019</option>\n                                </select>\n                        </div>\n\n                        <div className={\"radio\"}>\n                            {this.state.dataTypes\n                                ?\n                                    this.state.dataTypes.map((item:any)=>\n                                        <label>\n                                            <input\n                                                type=\"radio\"\n                                                value={item.id}\n                                                checked={this.state.selectedType === `${item.id}`}\n                                                onChange={this.onSelectType}\n\n                                            />\n                                            {item.name}\n                                        </label>\n                                    )\n\n                                :\"getting info\"\n                            }\n                        </div>\n                        <div>\n                            <Button type=\"primary\" className={\"btn submit\"} onClick={this.onFinish}>\n                                Submit\n                            </Button>\n                            <Button htmlType=\"button\" className={\"btn reset\"} onClick={this.onReset}>\n                                Reset\n                            </Button>\n                        </div>\n                    </div>\n\n                    <div className={\"chart\"}>\n                        {this.state.chartData_loaded\n                            ?\n                            <div>\n                                <Line {...this.config} />\n                                <p>Статистика: {this.state.chartData.region.name}</p>\n                                {this.state.chartData.dataType.id===1\n                                    ? <p>Викидів {this.state.chartData.dataType.name}/{this.state.chartData.dataType.units} в день</p>\n                                    : <p>Кількість {this.state.chartData.dataType.name}/{this.state.chartData.dataType.units} потрібна для поглинання викидів</p>}\n                            </div>\n                            : <div className={\"chart-placeholder\"}>No data selected</div>}\n                    </div>\n                </div>\n                <div className={\"info\"}>\n                    <h1>Основне завдання</h1>\n                    <p>\n                        На «/distribution» можна обрати дані для запиту на сервер та кнопка підтверження. На\n                        сторінці повинна міститися форма з наступними можливостями:\n                        Select з вибором регіону. <br/><br/>\n                        Select з вибором року має буди статично заповнений с 2015 до 2019 роки.<br/><br/>\n                        Radio з вибором типу даних <br/><br/>\n                        Button очищення даних на формі (червоного кольору), після натискання якої всі обрані\n                        значення мають обнулитися.<br/><br/>\n                        Button (зеленого кольору) відправки запиту на end point<br/><br/>\n                        Після відправлення запиту на цій же сторінці відобразити дані, що приходять з сервера,  у\n                        вигляді графіка залежності carbon foot print або nature impact від дати (по горизонтальній осі\n                        розташовуються дати, а по вертикальній значення в обраних одиницях).\n                    </p>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Distribution","import React from \"react\";\nimport \"./style.scss\"\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from \"../Components/Home/Home\";\nimport Distribution from \"../Components/Distribution/Distribution\";\n\nclass Navigation extends React.Component<any, any>{\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/\">Home</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/distribution\">Distribution</Link>\n                            </li>\n                        </ul>\n                    </nav>\n                    <Switch>\n                        <Route path=\"/distribution\">\n                            <Distribution/>\n                        </Route>\n                        <Route path=\"/\">\n                            <Home/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default Navigation","import React from 'react';\nimport './App.scss';\nimport Navigation from \"./Navigation/Navigation\";\n\nfunction App() {\n  return (\n    <>\n      <Navigation/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Theme/theme.scss';\nimport App from './App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}